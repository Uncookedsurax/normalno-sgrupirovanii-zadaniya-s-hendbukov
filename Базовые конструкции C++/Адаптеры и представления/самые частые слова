#include <iostream>
#include <sstream>
#include <unordered_map>
#include <vector>
#include <algorithm>
#include <cctype>

void ToLowerAndClean(std::string& word) {

    word.erase(remove_if(word.begin(), word.end(), [](char c) {
        return ispunct(c);
    }), word.end());

    std::transform(word.begin(), word.end(), word.begin(), ::tolower);
}

int main() {
    int k;
    std::cin >> k;
    std::cin.ignore(); 

    std::unordered_map<std::string, int> word_count;
    std::string line;

    
    while (std::getline(std::cin, line)) {
        std::istringstream stream(line);
        std::string word;

        
        while (stream >> word) {
            ToLowerAndClean(word);
            if (!word.empty()) {
                word_count[word]++;
            }
        }
    }

    
    std::vector<std::pair<std::string, int>> sorted_words(word_count.begin(), word_count.end());

    
    std::sort(sorted_words.begin(), sorted_words.end(), [](const auto& a, const auto& b) {
        return a.second > b.second || (a.second == b.second && a.first < b.first);
    });

    
    for (int i = 0; i < k && i < sorted_words.size(); ++i) {
        std::cout << sorted_words[i].first << "\t" << sorted_words[i].second << "\n";
    }

    return 0;
}
