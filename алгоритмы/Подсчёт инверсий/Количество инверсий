#include <iostream>
#include <vector>

using namespace std;

long long merge(vector<int>& arr, int left, int mid, int right) {
    int i = left, j = mid + 1;
    vector<int> temp(right - left + 1);
    int k = 0;
    long long inv_count = 0;

    while(i <= mid && j <= right) {
        if(arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            inv_count += (mid - i + 1); // Количество инверсий увеличивается на длину оставшихся элементов слева
        }
    }

    while(i <= mid) {
        temp[k++] = arr[i++];
    }

    while(j <= right) {
        temp[k++] = arr[j++];
    }

    for(k = 0; k < temp.size(); k++) {
        arr[left+k] = temp[k];
    }

    return inv_count;
}

long long countInversions(vector<int>& arr, int left, int right) {
    if(left >= right) return 0;

    int mid = (left + right) / 2;
    long long inv_left = countInversions(arr, left, mid);
    long long inv_right = countInversions(arr, mid + 1, right);
    long long split_inv = merge(arr, left, mid, right);

    return inv_left + inv_right + split_inv;
}

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    long long inversionCount = countInversions(arr, 0, n - 1);
    cout << inversionCount << endl;

    return 0;
}
