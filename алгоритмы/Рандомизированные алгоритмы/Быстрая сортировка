#include <iostream>
#include<vector>
#include <algorithm>
#include <random>

int lomutoPartition(std::vector<long long>& ai, int low, int high) {
	std::mt19937 rng(std::random_device{}());
	std::uniform_int_distribution<int> dist(low, high);
	int randomPivotIndex = dist(rng);
	std::swap(ai[low], ai[randomPivotIndex]);

	long long pivot = ai[low];
	int i = low;

	for (int j = low + 1; j <= high; ++j) {
		if (ai[j] <= pivot) {
			++i;
			std::swap(ai[i], ai[j]);
		}
	}

	std::swap(ai[low], ai[i]);
	return i;
}

void qsort(std::vector<long long>& ai,int low,int high) {
	if (low < high) {
		int pi = lomutoPartition(ai, low, high);

		qsort(ai, low, pi - 1);
		qsort(ai, pi + 1, high);
	}
}


int main() {
	int n;
	std::cin >> n;
	
	if (1 <= n <= 100000) {
		std::vector<long long> ai;
		for (int i = 0; i < n; ++i) {
			long long temp;
			std::cin >> temp;
			if (1 <= temp && temp <= 10000000000000000000LL) {
				ai.push_back(temp);
			}
			else {
				std::cout<< std::endl;
				return 1;
			}
		}
		qsort(ai, 0,n - 1);

		for (const auto& elem : ai) {
			std::cout <<" "<<elem;
		}	
		std::cout << "\n";
	}
	else { return 1; }
	return 0;
}
